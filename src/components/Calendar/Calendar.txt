// src/components/Calendar.tsx

import React, { useState } from 'react';
import { Calendar as BigCalendar, momentLocalizer } from 'react-big-calendar';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { Tabs, Tab } from '@mui/material';
import { format } from 'date-fns';

const localizer = momentLocalizer(moment);

const Calendar = () => {
  const [activeDate, setActiveDate] = useState(new Date()); // Initialize with today's date

  const handleTabChange = (event, newValue) => {
    // Logic to switch between day, week, month, and year views
    // Update activeDate accordingly
  };

  return (
    <div className="calendar-container">
      <Tabs value={/* selected tab value */} onChange={handleTabChange}>
        <Tab label="Day" value="day" />
        <Tab label="Week" value="week" />
        <Tab label="Month" value="month" />
        <Tab label="Year" value="year" />
      </Tabs>
      <BigCalendar
        localizer={localizer}
        events={/* your events data */}
        startAccessor="start"
        endAccessor="end"
        views={['day', 'week', 'month', 'year']}
        date={activeDate}
        // Other props as needed
      />
    </div>
  );
};

export default Calendar;




import React, { useState } from 'react'
import { Calendar, momentLocalizer } from 'react-big-calendar'
import moment from 'moment'
import styled from 'styled-components'
// import { FaArrowLeft } from 'react-icons/fa'
// import { FaArrowRight } from 'react-icons/fa'

const localizer = momentLocalizer(moment)

const BigCalendar = () => {
  const [events, setEvents] = useState([])
  const [newEventDate, setNewEventDate] = useState('')
  // const handleAddEvent = () => {
  //   const newEvent = {
  //     title: 'New Event',
  //     start: new Date(), // Today's date
  //     end: new Date(), // Today's date
  //   }
  //   setEvents([...events, newEvent])
  // }
  const handleAddEvent = () => {
    const newEvent = {
      title: 'New Event',
      start: new Date(newEventDate),
      end: new Date(newEventDate),
    }
    setEvents([...events, newEvent])
    setNewEventDate('') // Reset date input after adding event
  }

  const handleDateChange = (e) => {
    setNewEventDate(e.target.value)
  }
  // const today = new Date()

  // const myEventsList = [
  //   {
  //     title: 'Event 1',
  //     start: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate(),
  //       10,
  //       0
  //     ), // 10:00 AM today
  //     end: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate(),
  //       11,
  //       0
  //     ), // 11:00 AM today
  //   },
  //   {
  //     title: 'Event 2',
  //     start: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate(),
  //       14,
  //       0
  //     ), // 2:00 PM today
  //     end: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate(),
  //       15,
  //       0
  //     ), // 3:00 PM today
  //   },
  //   {
  //     title: 'Event 3',
  //     start: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate() + 1,
  //       9,
  //       0
  //     ), // 9:00 AM tomorrow
  //     end: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate() + 1,
  //       10,
  //       0
  //     ), // 10:00 AM tomorrow
  //   },
  //   {
  //     title: 'Event 4',
  //     start: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate() + 2,
  //       12,
  //       0
  //     ), // 12:00 PM day after tomorrow
  //     end: new Date(
  //       today.getFullYear(),
  //       today.getMonth(),
  //       today.getDate() + 2,
  //       13,
  //       0
  //     ), // 1:00 PM day after tomorrow
  //   },
  // ]
  // const customMessages = [
  //   {
  //     allDay: 'All-day',
  //     previous: <FaArrowLeft />,
  //     next: <FaArrowRight />,
  //     today: 'Today',
  //     month: 'Month',
  //     week: 'Week',
  //     day: 'Day',
  //     agenda: 'Agenda',
  //     date: 'Date',
  //     time: 'Time',
  //     event: myEventsList, // You can also customize event-related text
  //   },
  // ]

  return (
    <>
      <Wrapper>
        <input type='date' value={newEventDate} onChange={handleDateChange} />
        <button onClick={handleAddEvent}>Add Event</button>
        <div style={{ height: '100vh' }}>
          <Calendar
            localizer={localizer}
            events={events}
            startAccessor='start'
            endAccessor='end'
            // messages={customMessages} // Pass your custom messages to the messages prop
          />
        </div>
      </Wrapper>
    </>
  )
}
const Wrapper = styled.div`
  /* .rbc-calendar {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  .rbc-toolbar {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    border: 2px solid green;
    width: 100%;
  }
  .rbc-btn-group {
    border: 2px solid red;
  } */
`
export default BigCalendar





import React, { useState } from 'react';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css';

const localizer = momentLocalizer(moment);

const MyCalendar = () => {
  const [events, setEvents] = useState([]);
  const [newEventDate, setNewEventDate] = useState('');

  const handleDateChange = (e) => {
    setNewEventDate(e.target.value);
  };

  const handleAddEvent = () => {
    const newEvent = {
      title: 'New Event',
      start: new Date(newEventDate),
      end: new Date(newEventDate),
    };
    setEvents([...events, newEvent]);
    setNewEventDate(''); // Reset date input after adding event
  };

  return (
    <div>
      <input
        type="date"
        value={newEventDate}
        onChange={handleDateChange}
      />
      <button onClick={handleAddEvent}>Add Event</button>
      <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        style={{ height: 500 }}
      />
    </div>
  );
};

export default MyCalendar;



React Big Calendar uses several CSS classes to style its components. Here's a list of some commonly used classes along with their functions:

1. **.rbc-calendar**: The main container for the calendar component.
   
2. **.rbc-toolbar**: Container for the toolbar component, which includes navigation buttons and the current view name.

3. **.rbc-toolbar-label**: Styles the label that displays the current view name (e.g., "Month", "Week").

4. **.rbc-month-view, .rbc-week-view, .rbc-day-view**: Styles specific calendar views (month, week, day).

5. **.rbc-row, .rbc-row-bg, .rbc-day-slot, .rbc-date-cell**: These classes style the rows, background, slots, and individual date cells within the calendar.

6. **.rbc-event**: Styles events displayed on the calendar.

7. **.rbc-timeslot-group, .rbc-time-slot**: Styles for time slots in day and week views.

8. **.rbc-now**: Applied to the current date cell or time slot.

9. **.rbc-today**: Applied to today's date cell.

10. **.rbc-off-range**: Applied to date cells outside the current month's range.

11. **.rbc-header, .rbc-header-row, .rbc-header-gutter, .rbc-header-cell**: Styles for the header cells and rows in the calendar.

12. **.rbc-slot-selection**: Styles for the selection area when selecting multiple slots.

13. **.rbc-addons-dnd, .rbc-addons-dnd .rbc-addons-dnd-resizable, .rbc-addons-dnd .rbc-addons-dnd-draggable**: Styles specific to the drag-and-drop functionality provided by the `react-big-calendar-dnd` addon.

These classes provide a starting point for styling React Big Calendar components. Depending on your specific requirements and customizations, you may need to explore additional classes or use more specific selectors to achieve the desired appearance.
