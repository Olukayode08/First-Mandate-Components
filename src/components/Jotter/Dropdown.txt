import React, { useState } from 'react'
import styled from 'styled-components'

const countries = {
  Nigeria: {
    Lagos: ['Badagry', 'Epe', 'Ikeja', 'Ikorody', 'Lagos', 'Mushin', 'Shomolu'],
    Ogun: ['Abeokuta', 'Ijebu-Ode', 'Ilaro', 'Shagamu'],
    Ondo: ['Badagry', 'Epe', 'Ikeja', 'Ikorodu', 'Lagos', 'Mushin', 'Shomolu'],
    Osun: ['Abeokuta', 'Ijebu-Ode', 'Ilaro', 'Shagamu'],
    Oyo: ['Badagry', 'Epe', 'Ikeja', 'Ikorodu', 'Lagos', 'Mushin', 'Shomolu'],
  },
  USA: {
    California: ['Los Angeles', 'San Francisco', 'San Diego'],
    Texas: ['Houston', 'Dallas', 'Austin'],
  },
  Canada: {
    Ontario: ['Toronto', 'Ottawa', 'Hamilton'],
    Quebec: ['Montreal', 'Quebec City'],
  },
}

const CountryDropdown = () => {
  const [selectedCountry, setSelectedCountry] = useState('')
  const [selectedState, setSelectedState] = useState('')
  const [selectedCity, setSelectedCity] = useState('')
  const [states, setStates] = useState([])
  const [cities, setCities] = useState([])

  const handleCountryChange = (event) => {
    const country = event.target.value
    setSelectedCountry(country)
    setSelectedState('')
    setSelectedCity('')
    setStates(Object.keys(countries[country]))
    setCities([])
  }

  const handleStateChange = (event) => {
    const state = event.target.value
    setSelectedState(state)
    setSelectedCity('')
    setCities(countries[selectedCountry][state])
  }

  const handleCityChange = (event) => {
    const city = event.target.value
    setSelectedCity(city)
  }

  return (
    <>
      <Wrapper>
        <section className='select-section'>
          <select
            id='country'
            value={selectedCountry}
            onChange={handleCountryChange}
          >
            <option value=''>Country</option>
            {Object.keys(countries).map((country, index) => (
              <option key={index} value={country}>
                {country}
              </option>
            ))}
          </select>

          <select
            id='state'
            value={selectedState}
            onChange={handleStateChange}
            disabled={!selectedCountry}
          >
            <option value=''>State</option>
            {states.map((state, index) => (
              <option key={index} value={state}>
                {state}
              </option>
            ))}
          </select>
          <select
            id='city'
            value={selectedCity}
            onChange={handleCityChange}
            disabled={!selectedState}
          >
            <option value=''>City</option>
            {cities.map((city, index) => (
              <option key={index} value={city}>
                {city}
              </option>
            ))}
          </select>
        </section>
      </Wrapper>
    </>
  )
}
const Wrapper = styled.section`
  .select-section {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    width: 100%;
    margin: 10px 0;
  }
  select {
    width: 350px;
    height: 40px;
    border: 1px solid black;
    border: 1px solid black;
    outline: none;
    padding: 0 20px;
  }
`
export default CountryDropdown




Two

import React, { useState } from 'react'

const CountryDropdown = ({ countries, onSelectCountry }) => {
  return (
    <select onChange={(e) => onSelectCountry(e.target.value)}>
      <option value=''>Select Country</option>
      {countries.map((country, index) => (
        <option key={index} value={country}>
          {country}
        </option>
      ))}
    </select>
  )
}

const StateDropdown = ({ states, onSelectState }) => {
  return (
    <select onChange={(e) => onSelectState(e.target.value)}>
      <option value=''>Select State</option>
      {states.map((state, index) => (
        <option key={index} value={state}>
          {state}
        </option>
      ))}
    </select>
  )
}

const CityDropdown = ({ cities, onSelectCity }) => {
  return (
    <select onChange={(e) => onSelectCity(e.target.value)}>
      <option value=''>Select City</option>
      {cities.map((city, index) => (
        <option key={index} value={city}>
          {city}
        </option>
      ))}
    </select>
  )
}

const VillageDropdown = ({ villages }) => {
  return (
    <select>
      <option value=''>Select Village</option>
      {villages.map((village, index) => (
        <option key={index} value={village}>
          {village}
        </option>
      ))}
    </select>
  )
}

const PptDropdown = () => {
  const [selectedCountry, setSelectedCountry] = useState('')
  const [selectedState, setSelectedState] = useState('')
  const [selectedCity, setSelectedCity] = useState('')

  // Dummy data
  const countries = ['Country1', 'Country2', 'Country3']
  const states = ['State1', 'State2', 'State3']
  const cities = ['City1', 'City2', 'City3']
  const villages = ['Village1', 'Village2', 'Village3']

  const handleCountryChange = (country) => {
    setSelectedCountry(country)
    // You can fetch states for the selected country from an API here
  }

  const handleStateChange = (state) => {
    setSelectedState(state)
    // You can fetch cities for the selected state from an API here
  }

  const handleCityChange = (city) => {
    setSelectedCity(city)
    // You can fetch villages for the selected city from an API here
  }

  return (
    <div>
      <CountryDropdown
        countries={countries}
        onSelectCountry={handleCountryChange}
      />
      <br />
      <StateDropdown states={states} onSelectState={handleStateChange} />
      <br />
      <CityDropdown cities={cities} onSelectCity={handleCityChange} />
      <br />
      <VillageDropdown villages={villages} />
    </div>
  )
}

export default PptDropdown



Three


import React, { useState } from 'react'

const countriesData = {
  'Country 1': {
    'State 1': {
      'City 1': [
        'Village 1',
        'Village 2',
        'Village 3',
        'Village 4',
        'Village 5',
      ],
      // More cities...
    },
    // More states...
  },
  'Country 2': {
    // States and their cities and villages...
  },
  // More countries...
}

const Dropdown = ({ options, value, onChange }) => (
  <select value={value} onChange={onChange}>
    {options.map((option, index) => (
      <option key={index} value={option}>
        {option}
      </option>
    ))}
  </select>
)

const PropertyTypeDropdown = () => {
  const [selectedCountry, setSelectedCountry] = useState('')
  const [selectedState, setSelectedState] = useState('')
  const [selectedCity, setSelectedCity] = useState('')
  const [selectedVillage, setSelectedVillage] = useState('')

  const handleCountryChange = (event) => {
    const country = event.target.value
    setSelectedCountry(country)
    setSelectedState('')
    setSelectedCity('')
    setSelectedVillage('')
  }

  const handleStateChange = (event) => {
    const state = event.target.value
    setSelectedState(state)
    setSelectedCity('')
    setSelectedVillage('')
  }

  const handleCityChange = (event) => {
    const city = event.target.value
    setSelectedCity(city)
    setSelectedVillage('')
  }

  const handleVillageChange = (event) => {
    const village = event.target.value
    setSelectedVillage(village)
  }

  return (
    <div>
      <Dropdown
        options={Object.keys(countriesData)}
        value={selectedCountry}
        onChange={handleCountryChange}
      />
      {selectedCountry && (
        <Dropdown
          options={Object.keys(countriesData[selectedCountry])}
          value={selectedState}
          onChange={handleStateChange}
        />
      )}
      {selectedState && (
        <Dropdown
          options={Object.keys(countriesData[selectedCountry][selectedState])}
          value={selectedCity}
          onChange={handleCityChange}
        />
      )}
      {selectedCity && (
        <Dropdown
          options={countriesData[selectedCountry][selectedState][selectedCity]}
          value={selectedVillage}
          onChange={handleVillageChange}
        />
      )}
    </div>
  )
}

export default PropertyTypeDropdown




import React, { useState } from 'react'
import styled from 'styled-components'
import cloudUpload from '../../assets/cloud-upload.png'

const UploadPptFour = () => {
  const [imageURL, setImageURL] = useState(null)
  const [showOverlay, setShowOverlay] = useState(true)

  const handleImageChange = (event) => {
    const file = event.target.files[0]
    const reader = new FileReader()

    reader.onload = () => {
      setImageURL(reader.result)
      setShowOverlay(false) // Show the uploaded image, hide the overlay
    }

    if (file) {
      reader.readAsDataURL(file)
    }
  }

  return (
    <>
      <Wrapper>
        <section>
          <div className='image-upload-overlay'>
            {showOverlay && <img src={cloudUpload} alt='Upload' />}
            <input
              type='file'
              id='file-upload'
              accept='image/*'
              onChange={handleImageChange}
              className={showOverlay ? 'display' : 'close'}
              // style={{ {showOverlay ? 'display': 'none' : d }}}
            />
            {imageURL && (
              <img
                src={imageURL}
                alt='Uploaded'
                className={`uploaded-image ${showOverlay ? 'hidden' : ''}`}
              />
            )}
          </div>
        </section>
      </Wrapper>
    </>
  )
}
const Wrapper = styled.section`
  section {
    /* height: 200px; */
    width: 300px;
    border: 1px solid black;
  }
  input {
    cursor: pointer;
    width: 100%;
    /* height: 100%; */
  }
  .display {
    display: block;
  }
  .close {
    display: none;
  }
  img {
    width: 100%;
  }
  .image-upload-overlay {
    position: relative;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }

  .uploaded-image {
    max-width: 100%;
    max-height: 100%;
  }

  .hidden {
    display: none;
  }
`
export default UploadPptFour



Five

import React, { useState } from 'react'
import styled from 'styled-components'
import cloudUpload from '../../assets/cloud-upload.png'

const UploadPptFour = () => {
  const [imageOne, setImageOne] = useState('')
  

  const handleImageChangeOne = (event) => {
    const fileOne = event.target.files[0]
    if (fileOne) {
      const reader = new FileReader()
      reader.onloadend = () => {
        setImageOne(reader.result)
      }
      reader.readAsDataURL(fileOne)
    }
  }
  
  


  return (
    <>
      <Wrapper>
        <section>
          <div className='upload-image'>
            <div className='image-upload-container'>
              <img src={cloudUpload} alt='Cloud-img' className='cloud-img' />
              {imageOne ? (
                <div className='image-container'>
                  <img src={imageOne} alt='Uploaded' />
                </div>
              ) : (
                <label htmlFor='upload-input' className='upload-label'>
                  <span className='overlay-text'>
                    Add picture from your gallery
                  </span>
                </label>
              )}
              <input
                id='upload-input'
                type='file'
                accept='image/*'
                onChange={handleImageChangeOne}
                style={{ display: 'none' }}
              />
            </div>
          </div>
        </section>
      </Wrapper>
    </>
  )
}
const Wrapper = styled.section`
  section {
    display: flex;
    justify-content: space-between;
    width: 100%;
    border: 1px solid green;
  }
  .upload-image {
    width: 250px;
    background-color: #f4f4f4;
  }
  .image-upload-container {
    position: relative;
    width: 250px;
    height: 250px;
    overflow: hidden;
  }
  img {
    width: 100%;
  }
  .cloud-img {
    height: 180px;
    width: 180px;
    margin: 0 auto;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .upload-label {
    position: absolute;
    left: 0;
    bottom: 0;
    height: 100%;
    width: 100%;
    display: flex;
    justify-content: last baseline;
    align-items: last baseline;
    cursor: pointer;
  }
  .overlay-text {
    font-size: 18px;
    color: #000;
    text-align: center;
  }
`
export default UploadPptFour



How can I create a single document upload container such that there is an image overlay on the container which acts as the input field in which on clicking the container overlay the uploaded document sits on the overlay, with the ability to also change each uploaded document. No input field react js with it's css



